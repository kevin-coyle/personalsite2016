diff --git a/src/Plugin/Block/ContactFormBlock.php b/src/Plugin/Block/ContactFormBlock.php
index 9fda350..c2242a9 100644
--- a/src/Plugin/Block/ContactFormBlock.php
+++ b/src/Plugin/Block/ContactFormBlock.php
@@ -1,10 +1,13 @@
 <?php
 
+/**
+ * @file
+ * Contains Drupal\formblock\Plugin\Block\ContactFormBlock.
+ */
+
 namespace Drupal\formblock\Plugin\Block;
 
 use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Block\Annotation\Block;
-use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ -14,6 +17,7 @@ use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use \Drupal\Core\Access\AccessResult;
 
 /**
  * Provides a block for contact form.
@@ -80,7 +84,7 @@ class ContactFormBlock extends BlockBase implements ContainerFactoryPluginInterf
   protected $dateFormatter;
 
   /**
-   * Constructs a new ContactFormBlock plugin
+   * Constructs a new ContactFormBlock plugin.
    *
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -88,26 +92,26 @@ class ContactFormBlock extends BlockBase implements ContainerFactoryPluginInterf
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityManagerInterface $entityManager
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param \Drupal\Core\Session\AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entityFormBuilder
+   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
    *   The config factory.
    * @param \Drupal\Core\Flood\FloodInterface $flood
    *   The flood service.
-   * @param \Drupal\Core\DateTime\DateFormatter $dateFormatter
+   * @param \Drupal\Core\DateTime\DateFormatter $date_formatter
    *   The date formatter service.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entityManager, AccountInterface $currentUser, EntityFormBuilderInterface $entityFormBuilder, ConfigFactoryInterface $configFactory, FloodInterface $flood, DateFormatter $dateFormatter) {
-    $this->entityManager = $entityManager;
-    $this->currentUser = $currentUser;
-    $this->entityFormBuilder = $entityFormBuilder;
-    $this->configFactory = $configFactory;
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, AccountInterface $current_user, EntityFormBuilderInterface $entity_form_builder, ConfigFactoryInterface $config_factory, FloodInterface $flood, DateFormatter $date_formatter) {
+    $this->entityManager = $entity_manager;
+    $this->currentUser = $current_user;
+    $this->entityFormBuilder = $entity_form_builder;
+    $this->configFactory = $config_factory;
     $this->flood = $flood;
-    $this->dateFormatter = $dateFormatter;
+    $this->dateFormatter = $date_formatter;
 
     // We have to do this after our injections since the parent constructor
     // calls defaultConfiguration() which depends on the configFactory service.
@@ -212,23 +216,32 @@ class ContactFormBlock extends BlockBase implements ContainerFactoryPluginInterf
    * Implements \Drupal\block\BlockBase::blockAccess().
    */
   public function blockAccess(AccountInterface $account) {
-    return ($this->contactForm->access('view', $account) && $account->hasPermission('access site-wide contact form'));
+    if ($this->contactForm->access('view', $account) && $account->hasPermission('access site-wide contact form')) {
+      return AccessResult::allowed();
+    }
+    else {
+      return AccessResult::forbidden();
+    }
   }
 
   /**
    * Returns the current status of flood control.
    *
-   * @return
+   * @return bool
+   *   Checking if the user can submit more contact forms.
    */
   protected function floodControl() {
     $limit = $this->configFactory->get('contact.settings')->get('flood.limit');
     $interval = $this->configFactory->get('contact.settings')->get('flood.interval');
+
     if (!$this->flood->isAllowed('contact', $limit, $interval)) {
       return $this->t('You cannot send more than %limit messages in @interval. Try again later.', array(
         '%limit' => $limit,
         '@interval' => $this->dateFormatter->formatInterval($interval),
       ));
     }
+
     return FALSE;
   }
+
 }
diff --git a/src/Plugin/Block/NodeFormBlock.php b/src/Plugin/Block/NodeFormBlock.php
index 6c2034f..60f8dcc 100644
--- a/src/Plugin/Block/NodeFormBlock.php
+++ b/src/Plugin/Block/NodeFormBlock.php
@@ -1,10 +1,13 @@
 <?php
 
+/**
+ * @file
+ * Contains Drupal\formblock\Plugin\Block\NodeFormBlock.
+ */
+
 namespace Drupal\formblock\Plugin\Block;
 
 use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Block\Annotation\Block;
-use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Component\Utility\Xss;
@@ -44,7 +47,7 @@ class NodeFormBlock extends BlockBase implements ContainerFactoryPluginInterface
   protected $entityFormBuilder;
 
   /**
-   * Constructs a new NodeFormBlock plugin
+   * Constructs a new NodeFormBlock plugin.
    *
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -52,17 +55,17 @@ class NodeFormBlock extends BlockBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityManagerInterface $entityManger
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entityFormBuilder
+   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entityManager, EntityFormBuilderInterface $entityFormBuilder) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, EntityFormBuilderInterface $entity_form_builder) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->setConfiguration($configuration);
 
-    $this->entityManager = $entityManager;
-    $this->entityFormBuilder = $entityFormBuilder;
+    $this->entityManager = $entity_manager;
+    $this->entityFormBuilder = $entity_form_builder;
   }
 
   /**
@@ -111,9 +114,10 @@ class NodeFormBlock extends BlockBase implements ContainerFactoryPluginInterface
   }
 
   /**
-   * Get an arrau of node types
+   * Get an arrau of node types.
    *
    * @return array
+   *   Which node types.
    */
   protected function getNodeTypes() {
     return array_map(function ($bundle_info) {
@@ -155,6 +159,8 @@ class NodeFormBlock extends BlockBase implements ContainerFactoryPluginInterface
    */
   public function blockAccess(AccountInterface $account) {
     $access_control_handler = $this->entityManager->getAccessControlHandler('node');
+
     return $access_control_handler->createAccess($this->configuration['type'], $account);
   }
+
 }
diff --git a/src/Plugin/Block/UserPasswordBlock.php b/src/Plugin/Block/UserPasswordBlock.php
index 813cfd7..1dacd87 100644
--- a/src/Plugin/Block/UserPasswordBlock.php
+++ b/src/Plugin/Block/UserPasswordBlock.php
@@ -1,10 +1,13 @@
 <?php
 
+/**
+ * @file
+ * Contains Drupal\forblock\Plugin\Block\UserPasswordBlock.
+ */
+
 namespace Drupal\formblock\Plugin\Block;
 
 use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Block\Annotation\Block;
-use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -32,7 +35,7 @@ class UserPasswordBlock extends BlockBase implements ContainerFactoryPluginInter
   protected $formBuilder;
 
   /**
-   * Constructs a new UserPasswordBlock plugin
+   * Constructs a new UserPasswordBlock plugin.
    *
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -40,16 +43,16 @@ class UserPasswordBlock extends BlockBase implements ContainerFactoryPluginInter
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
    *   The form builder.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $formBuilder) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, FormBuilderInterface $form_builder) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
-    $this->formBuilder = $formBuilder;
+    $this->formBuilder = $form_builder;
   }
 
   /**
-   * {@inherticdoc}
+   * Creates the block.
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
@@ -70,4 +73,5 @@ class UserPasswordBlock extends BlockBase implements ContainerFactoryPluginInter
 
     return $build;
   }
+
 }
diff --git a/src/Plugin/Block/UserRegisterBlock.php b/src/Plugin/Block/UserRegisterBlock.php
index 5a3244e..1408dfe 100644
--- a/src/Plugin/Block/UserRegisterBlock.php
+++ b/src/Plugin/Block/UserRegisterBlock.php
@@ -1,10 +1,13 @@
 <?php
 
+/**
+ * @file
+ * Contains Drupal\formblock\Plugin\Block\UserRegisterBlock.
+ */
+
 namespace Drupal\formblock\Plugin\Block;
 
 use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Block\Annotation\Block;
-use Drupal\Core\Annotation\Translation;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -27,21 +30,21 @@ use Drupal\Core\Entity\EntityFormBuilderInterface;
 class UserRegisterBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
-   * The entity manager
+   * The entity manager.
    *
    * @var \Drupal\Core\Entity\EntityManagerInterface.
    */
   protected $entityManager;
 
   /**
-   * The entity form builder
+   * The entity form builder.
    *
    * @var \Drupal\Core\Entity\EntityManagerInterface.
    */
   protected $entityFormBuilder;
 
   /**
-   * Constructs a new UserRegisterBlock plugin
+   * Constructs a new UserRegisterBlock plugin.
    *
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -49,15 +52,15 @@ class UserRegisterBlock extends BlockBase implements ContainerFactoryPluginInter
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityManagerInterface $entityManager
+   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entityFormBuilder
+   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entityManager, EntityFormBuilderInterface $entityFormBuilder) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityManagerInterface $entity_manager, EntityFormBuilderInterface $entity_form_builder) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
-    $this->entityManager = $entityManager;
-    $this->entityFormBuilder = $entityFormBuilder;
+    $this->entityManager = $entity_manager;
+    $this->entityFormBuilder = $entity_form_builder;
   }
 
   /**
@@ -79,16 +82,17 @@ class UserRegisterBlock extends BlockBase implements ContainerFactoryPluginInter
   public function build() {
     $build = array();
 
-    $account = $this->entityManager->getStorage('user') ->create(array());
+    $account = $this->entityManager->getStorage('user')->create(array());
     $build['form'] = $this->entityFormBuilder->getForm($account, 'register');
 
     return $build;
   }
 
   /**
-   *Implements \Drupal\block\BlockBase::blockAccess().
+   * Implements \Drupal\block\BlockBase::blockAccess().
    */
   public function blockAccess(AccountInterface $account) {
     return ($account->isAnonymous()) && (\Drupal::config('user.settings')->get('register') != USER_REGISTER_ADMINISTRATORS_ONLY);
   }
+
 }
